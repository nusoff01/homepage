{"version":3,"sources":["Feed/Feed.tsx","projects/MlbPitching/constants.tsx","projects/MlbPitching/MlbPitching.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Feed","this","state","tags","tagMap","props","projects","forEach","project","tag","Object","keys","map","tagName","getTags","className","tagState","title","content","href","link","React","Component","teamNameMap","teamName","primaryColor","secondaryColor","inningsCutoffOptions","guidelineValues","simulationMap","getName","rawName","indexOf","split","getTeamPrimary","teamKey","getTeamSecondary","Legend","legendProps","useEffect","container","d3","domain","xScale","svg","selectAll","data","enter","append","attr","merge","width","exit","remove","addVerticalLine","leagueAvgText","text","d","leagueTop","teamAvgText","teamTop","guidelineLabels","drawLegend","range","id","xPos","y1","y2","lineClass","secondaryLineClass","avgLine","TeamPitching","teamProps","drawAvgLine","drawTeamAvgLine","teamAvg","drawPlayers","rScale","players","tooltip","height","playerGroups","enteredPlayerGroups","xValue","each","selection","filter","dLocal","circle","Tm","r","on","classed","y","x","Math","max","style","floor","player","playerName","Name","playerStats","ERA","IP","setTooltipText","initials","reduce","currNamePart","teamID","stop","simulation","nodes","force","strength","radius","originalX","min","enteredSVG","minCircleWidth","maxCircleWidth","teamPlayers","select","team","v","drawChart","useWindowSize","useState","chartWidth","setChartWidth","handleResize","node","getBoundingClientRect","window","addEventListener","removeEventListener","MlbPitching","playersPitchingData","setPlayersPitchingData","teamsPitchingData","setTeamsPitchingData","setDomain","minInnings","setMinInnings","xVar","a","defer","await","error","teams","Number","sort","teamA","teamB","fetchData","onChange","e","target","value","innings","i","key","App","basename","exact","path","render","Boolean","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.002658f0.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Feed.scss';\r\nimport { type } from 'os';\r\n\r\ntype FeedProps = {\r\n    projects: Array<any>\r\n}\r\n\r\ntype FeedState = {\r\n    tags: Array<Array<any>>;\r\n}\r\n\r\nclass Feed extends React.Component<FeedProps, {}> {\r\n    \r\n    public componentDidMount () {\r\n        this.state = {\r\n            tags: []\r\n        }\r\n    }\r\n\r\n    private getTags (): Array<Array<any>> {\r\n        let tagMap: any = {};\r\n        this.props.projects.forEach((project) => {\r\n            project.tags.forEach((tag: string) => {\r\n                tagMap[tag] = true;\r\n            });\r\n        });\r\n        return Object.keys(tagMap).map((tagName) => {\r\n            return [tagName, true];\r\n        });\r\n    }\r\n\r\n    public render () {\r\n        let tags: Array<Array<any>> = this.getTags();\r\n        return (\r\n            <div className=\"feedContainer\">\r\n                <h1 className='feedTitle'>Projects</h1>\r\n                <h4 className='tagToggles'>\r\n                    Tags: \r\n                    {tags.map((tagState) => {\r\n                        return <button className='tagToggle'>{tagState[0]}</button>;\r\n                    })}\r\n                </h4>\r\n                {this.props.projects.map((project) => {\r\n                    return <div className='projectContainer'>\r\n                        <h2 className='projectHeader'>{project.title}</h2>\r\n                        <h4 className='tags'>\r\n                            {project.tags.map((tag: String) => {\r\n                                return <span className='tag'>{tag}</span>;\r\n                            })}\r\n                        </h4>\r\n                        <hr/>\r\n                        <p className='projectSubheader'>\r\n                            {project.content}     \r\n                            <br/>\r\n                            <br/>\r\n                            <a href={`${project.link}`}>\r\n                            <button className='projectLink'>Check it out</button>\r\n                            </a>\r\n                        </p>\r\n                    </div>;\r\n                })}\r\n      </div>\r\n    );  \r\n  }\r\n}\r\n\r\nexport default Feed;\r\n","const teamNameMap: any = {\r\n    'ARI': {teamName: 'Arizona Diamondbacks', primaryColor: 'rgb(167,25,48)', secondaryColor: 'rgb(48,206,216)'},\r\n    'ATL': {teamName: 'Atlanta Braves', primaryColor: 'rgb(206,17,65)', secondaryColor: 'rgb(19, 39, 79)'},\r\n    'BAL': {teamName: 'Baltimore Orioles', primaryColor: 'rgb(223,70,1)', secondaryColor: 'rgb(39,37,31)'},\r\n    'BOS': {teamName: 'Boston Red Sox', primaryColor: 'rgb(189, 48, 57)', secondaryColor: 'rgb(12,35,64)'},\r\n    'CHC': {teamName: 'Chicago Cubs', primaryColor: 'rgb(14,51,134)', secondaryColor: 'rgb(204,52,51)'},\r\n    'CHW': {teamName: 'Chicago White Sox', primaryColor: 'rgb(39,37,31)', secondaryColor: 'rgb(196,206,212)'},\r\n    'CIN': {teamName: 'Cincinnati Reds', primaryColor: 'rgb(198,1,31)', secondaryColor: 'rgb(0,0,0)'},\r\n    'CLE': {teamName: 'Cleveland Baseball Team', primaryColor: 'rgb(12,35,64)', secondaryColor: 'rgb(227,25,55)'},\r\n    'COL': {teamName: 'Colorado Rockies', primaryColor: 'rgb(51,0,111)', secondaryColor: 'rgb(196,206,212)'},\r\n    'DET': {teamName: 'Detroit Tigers', primaryColor: 'rgb(12,35,64)', secondaryColor: 'rgb(250,70,22)'},\r\n    'HOU': {teamName: 'Houston Astros', primaryColor: 'rgb(0,45,98)', secondaryColor: 'rgb(235,110,31)'},\r\n    'KCR': {teamName: 'Kansas City Royals', primaryColor: 'rgb(0,70,135)', secondaryColor: 'rgb(189,155,96)'},\r\n    'LAA': {teamName: 'Los Angeles Angels', primaryColor: 'rgb(0,50,99)', secondaryColor: 'rgb(186,0,33)'},\r\n    'LAD': {teamName: 'Los Angeles Dodgers', primaryColor: 'rgb(0,90,156)', secondaryColor: 'rgb(255,255,255)'},\r\n    'MIA': {teamName: 'Miami Marlins', primaryColor: 'rgb(0,0,0)', secondaryColor: 'rgb(0,163,224)'},\r\n    'MIL': {teamName: 'Milwuake Brewers', primaryColor: 'rgb(18, 40, 75)', secondaryColor: 'rgb(255, 197, 47)'},\r\n    'MIN': {teamName: 'Minnesota Twins', primaryColor: 'rgb(0,43,92)', secondaryColor: 'rgb(211,17,69)'},\r\n    'NYM': {teamName: 'New York Mets', primaryColor: 'rgb(0,45, 114)', secondaryColor: 'rgb(252,89,16)'},\r\n    'NYY': {teamName: 'New York Yankees', primaryColor: 'rgb(12,35,64)', secondaryColor: 'rgb(228,0,44)'},\r\n    'OAK': {teamName: 'Oakland Athletics', primaryColor: 'rgb(0,56,49)', secondaryColor: 'rgb(239,178,30)'},\r\n    'PHI': {teamName: 'Philadelphia Phillies', primaryColor: 'rgb(232,24,40)', secondaryColor: 'rgb(0,45,114)'},\r\n    'PIT': {teamName: 'Pittsburgh Pirates', primaryColor: 'rgb(39,37,31)', secondaryColor: 'rgb(253,184,39)'},\r\n    'SDP': {teamName: 'San Diego Padres', primaryColor: 'rgb(47,36,29)', secondaryColor: 'rgb(255,196,37)'},\r\n    'SEA': {teamName: 'Seattle Mariners', primaryColor: 'rgb(0,92,92)', secondaryColor: 'rgb(196,206,212)'},\r\n    'SFG': {teamName: 'San Francisco Giants', primaryColor: 'rgb(39,37,31)', secondaryColor: 'rgb(253,90,30)'},\r\n    'STL': {teamName: 'St. Louis Cardinals', primaryColor: 'rgb(196,30,58)', secondaryColor: 'rgb(12,35,64)'},\r\n    'TBR': {teamName: 'Tampa Bay Rays', primaryColor: 'rgb(9,44,92)', secondaryColor: 'rgb(143,188,230)'},\r\n    'TEX': {teamName: 'Texas Rangers', primaryColor: 'rgb(0,50,120)', secondaryColor: 'rgb(192,17,31)'},\r\n    'TOR': {teamName: 'Toronto Blue Jays', primaryColor: 'rgb(0,107,166)', secondaryColor: 'rgb(29,45,92)'},\r\n    'WSN': {teamName: 'Washington Nationals', primaryColor: 'rgb(20,34,90)', secondaryColor: 'rgb(171,0,3)'}\r\n};\r\n\r\nexport default teamNameMap;","import React, { useState, useEffect, DOMElement } from \"react\";\r\nimport * as d3 from \"d3\";\r\nimport teamNameMap from './constants';\r\nimport './MlbPitching.scss';\r\n\r\nconst padding = 32;\r\nconst xVar = 'ERA+';\r\nconst minCircleWidthBelow = 4;\r\nconst minCircleWidthAbove = 12;\r\nconst maxCircleWidthBelow = 16;\r\nconst maxCircleWidthAbove = 36;\r\nconst styleWidthCutoff = 720;\r\nconst inningsCutoffOptions = [0,10,20,30,40,50,60];\r\nconst guidelineValues = [0,50,100,150,200,400,800,1200];\r\n\r\nlet simulationMap: any = {};\r\n\r\nfunction getName (rawName: string) {\r\n    if (!rawName)\r\n        return '';\r\n    if (rawName.indexOf('*') !== -1) {\r\n        return rawName.split('*')[0];\r\n    }\r\n    else if (rawName.indexOf('\\\\') !== -1) {\r\n        return rawName.split('\\\\')[0];\r\n    }\r\n    return rawName;\r\n}\r\n\r\nconst getTeamPrimary = (teamKey: string): string => {\r\n    if (teamKey in teamNameMap) {\r\n        return teamNameMap[teamKey].primaryColor;\r\n    } else {\r\n        return 'black';\r\n    }\r\n}\r\n\r\nconst getTeamSecondary = (teamKey: string): string => {\r\n    if (teamKey in teamNameMap) {\r\n        return teamNameMap[teamKey].secondaryColor;\r\n    } else {\r\n        return 'black';\r\n    }    \r\n}\r\n\r\nfunction getInitials (rawName: string) {\r\n    let fullName = getName(rawName);\r\n    let initials = fullName.split(' ').reduce((initials, currNamePart) => {\r\n        return initials + currNamePart[0] + '.'\r\n    }, '');\r\n    return initials;\r\n}\r\n\r\nconst MlbPitching = () => {\r\n\r\n    const [playersPitchingData, setPlayersPitchingData] = useState([]);\r\n    const [teamsPitchingData, setTeamsPitchingData] = useState([]);\r\n    const [domain, setDomain] = useState();\r\n    const [minInnings, setMinInnings] = useState(0);\r\n    const xVar = 'ERA+';\r\n\r\n\r\n    const getInningsFilteredPitchers = () => {\r\n        let filteredPlayers = playersPitchingData.filter((player: any) => {\r\n            return player.IP >= minInnings;\r\n        }); \r\n        return filteredPlayers;\r\n    }\r\n\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            d3.queue()\r\n                .defer(d3.csv, \"data/pitchingData.csv\")\r\n                .defer(d3.csv, \"data/teamPitchingData.csv\")\r\n                .await(function(error, players, teams) {\r\n                    setPlayersPitchingData(players);\r\n                    teams.map((team: any) => {\r\n                        team['ERA+'] = Number(team['ERA+']);\r\n                        team['ERA'] = Number(team['ERA']);\r\n                        return team;\r\n                    });\r\n\r\n                    teams.sort((teamA: any, teamB: any) => {\r\n                        if (teamA[xVar] < teamB[xVar]) {\r\n                            return 1;\r\n                        } else if (teamA[xVar] > teamB[xVar]) {\r\n                            return -1;\r\n                        }\r\n                        return 0;\r\n                    });\r\n\r\n                    players = players.map((player: any) => {\r\n                        player.xValue = Number(player[xVar]);\r\n                        player.r = Number(player['IP']);\r\n                        player.y = 0;\r\n                        return player;\r\n                    });\r\n\r\n                    setDomain(d3.extent(players, (d: any) => d.xValue) as any);                \r\n                    setTeamsPitchingData(teams);\r\n                });   \r\n        }\r\n        fetchData();\r\n    }, []);\r\n\r\n    const getTeamName = (teamKey: string): string => {\r\n        if (teamKey in teamNameMap) {\r\n            return teamNameMap[teamKey].teamName;\r\n        } else {\r\n            return '';\r\n        }\r\n    }\r\n\r\n    const chartWidth = useWindowSize();\r\n\r\n    return (<div className={'mlbPitchingContainer'}>\r\n        <h1 className={'header title'}>2020 MLB Pitching Staff Comparisons</h1>\r\n        <p className={'header subtitle'}>Each team's pitchers are circles: the size of the circle is how much that pitcher has been used by that team (Innings pitched), and the horizontal position is how effective they've been (ERA+)</p>\r\n        <hr/>\r\n        <div className={'controls'}>\r\n            <span>Minimum innings: </span>\r\n            <select onChange={(e: any) => {setMinInnings(Number(e.target.value))}}>\r\n                {inningsCutoffOptions.map((innings: any, i: number) => \r\n                (<option  key={i}>\r\n                    {innings}\r\n                </option>))}\r\n            </select>\r\n        </div>\r\n        <Legend domain={domain} width={chartWidth}/>\r\n        <div id={'eachTeam'}>\r\n            {teamsPitchingData.map((team: any, i: number) => (\r\n                <div key={i} className={'teamRow'}>\r\n                    <div className={'teamOverview'}>\r\n                        <h1 className={'teamName'} style={{'color': getTeamPrimary(team.Tm)}}>{getTeamName(team.Tm)}</h1>\r\n                        <p className={'teamStats'}>team ERA+: {team['ERA+']}</p>\r\n                        <p className={'teamStats'}>team ERA: {team['ERA']}</p>\r\n                    </div>\r\n                    <TeamPitching teamID={team.Tm} domain={domain} data={getInningsFilteredPitchers()} team={team} width={chartWidth}/>\r\n                </div>\r\n            ))}\r\n        </div>\r\n        <div className={'credits'}> Data comes from baseball-reference.com, found <a href='https://www.baseball-reference.com/leagues/MLB/2020-standard-pitching.shtml'>here</a></div>\r\n    </div>);\r\n}\r\n\r\nconst Legend = (legendProps: any) => {\r\n    const drawLegend = (container: any, xScale: any) => {\r\n        const teamTop = 50;\r\n        const leagueTop = 30;\r\n\r\n        let svg: any = container.selectAll('svg')\r\n            .data([legendProps.domain]);\r\n        svg.enter().append('svg')\r\n            .attr('height', 80)\r\n            .merge(svg)\r\n            .attr('width', legendProps.width);\r\n        svg.exit().remove();\r\n\r\n        addVerticalLine(svg, xScale(102), leagueTop, 80, 'totalAvg');\r\n        addVerticalLine(svg, xScale(141), teamTop, 80, 'teamAvg');\r\n\r\n        let leagueAvgText = svg.selectAll('.leagueAvgText').data(['League avg']);\r\n        leagueAvgText.enter().append('text')\r\n            .attr('class', 'leagueAvgText')\r\n            .text((d: string) => d)\r\n            .attr('y', leagueTop - 4)\r\n            .merge(leagueAvgText)\r\n            .attr('x', xScale(102));\r\n        leagueAvgText.exit().remove();\r\n\r\n        let teamAvgText = svg.selectAll('.teamAvgText').data(['Team avg']);\r\n        teamAvgText.enter().append('text')\r\n            .attr('class', 'teamAvgText')\r\n            .text((d: string) => d)\r\n            .attr('y', teamTop - 4)\r\n            .merge(teamAvgText)\r\n            .attr('x', xScale(141));\r\n        teamAvgText.exit().remove();\r\n\r\n        let guidelineLabels = svg.selectAll('.guidelineLabel').data(guidelineValues);\r\n        guidelineLabels.enter()\r\n            .append('text')\r\n            .attr('class', (d: any) => `guidelineLabel guidelineLabel${d}`)\r\n            .attr('y', 78)\r\n            .merge(guidelineLabels)\r\n            .text((d: any) => d)\r\n            .attr('x', (d: any) => xScale(d));\r\n        guidelineLabels.exit().remove();\r\n    }\r\n\r\n    useEffect(() => {\r\n        let container: any = d3.select(`#legend`);\r\n        if (legendProps.domain) {\r\n            const xScale = d3.scaleLinear().domain(legendProps.domain).range([padding, legendProps.width - (2 * padding)]);\r\n            drawLegend(container, xScale);    \r\n        }\r\n    });\r\n\r\n    return (<div id={`legend`}>\r\n    </div>);\r\n}\r\n\r\nconst addVerticalLine = (svg: any, xPos: number, y1: number, y2: number, lineClass: string, secondaryLineClass: string = '') => {\r\n    let avgLine = svg.selectAll(`.${lineClass}`)\r\n            .data([xPos]); \r\n        avgLine.enter()\r\n            .append('line')\r\n            .attr('class', `${lineClass} ${secondaryLineClass}`)\r\n            .merge(avgLine)\r\n            .attr('y1', y1)\r\n            .attr('y2', y2)\r\n            .attr('x1', (xPos: number) => xPos)\r\n            .attr('x2', (xPos: number) => xPos);\r\n    avgLine.exit().remove();\r\n}\r\n\r\nconst TeamPitching = (teamProps: any) => {\r\n    const data: Array<any> = teamProps.data;\r\n    const width: number = teamProps.width;\r\n\r\n    const drawChart = (container: any) => {\r\n        let svg: any = container.selectAll(`.${teamProps.teamID}PlayerChart`)\r\n            .data([teamProps.teamID]);\r\n        let containerHeight = width > styleWidthCutoff ? 360 : 180;\r\n        const height: number = containerHeight;\r\n        let enteredSVG = svg.enter()\r\n            .append('svg')\r\n            .attr('class', (d: any) => `${d}PlayerChart teamPlayersChart`)\r\n            .merge(svg)\r\n            .attr('width', width)\r\n            .attr('height', height);\r\n        svg.exit().remove();\r\n\r\n        let localDomain = teamProps.domain ? teamProps.domain : [0,1];\r\n\r\n        const xScale = d3.scaleLinear().domain(teamProps.domain).range([padding, width - (2 * padding)]);\r\n        let minCircleWidth = (width < styleWidthCutoff) ? minCircleWidthBelow : minCircleWidthAbove;\r\n        let maxCircleWidth = (width < styleWidthCutoff) ? maxCircleWidthBelow : maxCircleWidthAbove;\r\n        const rScale = d3.scaleLinear().domain([0, d3.max(data, (d: any) => d.r)]).range([minCircleWidth, maxCircleWidth]);\r\n\r\n        let teamPlayers = data.filter((player: any) => {\r\n            if (player.Tm !== teamProps.teamID) {\r\n                return false;\r\n            }\r\n            return true;\r\n        });\r\n        teamPlayers = teamPlayers.map((player: any) => {\r\n            player.x = xScale(player[xVar]);\r\n            player.originalX = player.x;\r\n            player.y = height / 2;\r\n            return player;\r\n        });\r\n\r\n        const tooltip = container.select('.tooltipContainer');\r\n\r\n        drawAvgLine(enteredSVG, xScale);\r\n        drawTeamAvgLine(enteredSVG, xScale, teamProps.team[xVar]);\r\n        guidelineValues.forEach((v: number) => {\r\n            addVerticalLine(enteredSVG, xScale(v), 0, height, `guideline${v}`,  `guideline`);\r\n        })\r\n        drawPlayers(enteredSVG, xScale, rScale, teamPlayers, tooltip);\r\n    }\r\n\r\n    const drawAvgLine = (svg: any, xScale: any) => {\r\n        let avgLine = svg.selectAll('.avgLine')\r\n            .data([102]); //HARDCODED\r\n        avgLine.enter()\r\n            .append('line')\r\n            .attr('class', 'avgLine')\r\n            .merge(avgLine)\r\n            .attr('y1', 0)\r\n            .attr('y2', svg.attr('height'))\r\n            .attr('x1', (d: number) => xScale(d))\r\n            .attr('x2', (d: number) => xScale(d));\r\n        avgLine.exit().remove();\r\n    }\r\n\r\n    const drawTeamAvgLine = (svg: any, xScale: any, teamAvg: number) => {\r\n        let avgLine = svg.selectAll('.teamAvgLine')\r\n            .data([teamAvg]); \r\n        avgLine.enter()\r\n            .append('line')\r\n            .attr('class', 'teamAvgLine')\r\n            .attr('y1', 0)\r\n            .merge(avgLine)\r\n            .attr('y2', svg.attr('height'))\r\n            .attr('x1', (d: number) => xScale(d))\r\n            .attr('x2', (d: number) => xScale(d));\r\n        avgLine.exit().remove();\r\n    }\r\n\r\n    const setTooltipText = (tooltip: any, player: any) => {\r\n        let playerName = tooltip.selectAll('.playerName').data([getName(player.Name)]);\r\n        playerName.enter().append('h3')\r\n            .attr('class', 'playerName')\r\n            .merge(playerName)\r\n            .text((d: String) => d);\r\n        playerName.exit().remove();\r\n\r\n        let playerStats = tooltip.selectAll('.playerStats').data([player])\r\n        playerStats.enter().append('p')\r\n            .attr('class', 'playerStats')\r\n            .merge(playerStats)\r\n            .text((d: any) => `ERA: ${d.ERA}, ERA+: ${d['ERA+']}, IP: ${d.IP}`);\r\n        playerStats.exit().remove();\r\n    }\r\n\r\n\r\n    const drawPlayers = (svg: any, xScale: any, rScale: any, players: any, tooltip: any) => {\r\n        let height = svg.attr('height');\r\n\r\n        let playerGroups = svg.selectAll('.playerGroup')\r\n            .data(players);\r\n        let enteredPlayerGroups = playerGroups.enter()\r\n            .append('g')\r\n            .attr('class', 'playerGroup')\r\n            .merge(playerGroups)\r\n            .attr('transform', (d: any) => `translate(${xScale(d.xValue)},${height/2})`);\r\n        enteredPlayerGroups.each(function (d: any) {\r\n                let selection = enteredPlayerGroups.filter((dLocal: any) => {\r\n                    return d === dLocal;\r\n                });\r\n                let circle = selection.selectAll('circle').data([d]);\r\n                circle.enter().append('circle')\r\n                    .attr('cx', 0)\r\n                    .attr('cy', 0)\r\n                    .attr('class', 'playerDot')\r\n                    .attr('fill', getTeamPrimary(d.Tm))\r\n                    .merge(circle)\r\n                    .attr('r', (d: any) => rScale(d.r))\r\n                    .on('mouseover', function () {\r\n                        tooltip.classed('hidden', false);\r\n                        let y = height - (d.y - rScale(d.r) - 8);\r\n                        let x = Math.max((width - d.x < 100) ? width - 200 : d.x - 100, 16);\r\n                        tooltip.style('left', `${Math.floor(x)}px`)\r\n                            .style('bottom', `${Math.floor(y)}px`);\r\n                        setTooltipText(tooltip, d);\r\n                    })\r\n                    .style('stroke', getTeamSecondary(d.Tm))\r\n                    .on('mouseout', () => {\r\n                        tooltip.classed('hidden', true);\r\n                    });\r\n                circle.exit().remove();\r\n\r\n                let initials = selection.selectAll('text').data([d]);\r\n                initials.enter().append('text')\r\n                    .attr('class', 'playerInitials')\r\n                    .attr('alignment-baseline', 'middle')\r\n                    .style('fill', getTeamSecondary(d.Tm))\r\n                    .merge(initials)\r\n                    .style('display', width < styleWidthCutoff ? 'none' : 'block')\r\n                    .text(getInitials(d.Name))\r\n                initials.exit().remove();\r\n            })\r\n        playerGroups.exit().remove();\r\n\r\n        if (simulationMap[teamProps.teamID]) {\r\n            simulationMap[teamProps.teamID].stop();\r\n        }\r\n\r\n        var simulation = d3.forceSimulation()\r\n            .nodes(players)\r\n            .force(\"y\", d3.forceY(function(d) { return height / 2; }).strength(0.001))\r\n            .force(\"collide\", d3.forceCollide().radius(function(d: any) { return rScale(d.r); }))\r\n            .on('tick', () => {\r\n                enteredPlayerGroups.each(function(d: any){d.x = d.originalX; }) //constrains/fixes x-position\r\n                let xTransform = 0;\r\n                let yTransform = 0;\r\n                enteredPlayerGroups.attr('transform', (d: any) => {\r\n                    d.y = Math.max(rScale(d.r), Math.min(height - rScale(d.r), d.y));\r\n                    d.x = (d[xVar] === '') ? (width - 24) : Math.max(rScale(d.r), Math.min(width - rScale(d.r), d.x));\r\n                    return `translate(${d.x},${d.y})`;\r\n                });\r\n            });\r\n        simulationMap[teamProps.teamID] = simulation;\r\n    };\r\n    \r\n    useEffect(() => {\r\n        let container: any = d3.select(`.${teamProps.teamID}teamChartContainer`);\r\n        drawChart(container);\r\n    });\r\n\r\n    return (<div className={`teamChartContainer ${teamProps.teamID}teamChartContainer`}>\r\n        <div className={'tooltipContainer hidden'} >\r\n            <h4 className={'playerName'}></h4>\r\n        </div>\r\n    </div>);\r\n}\r\n\r\nconst useWindowSize = () => {\r\n    const [chartWidth, setChartWidth] = useState(0);\r\n    useEffect(() => {\r\n        function handleResize() {\r\n            let container: any = d3.select(`#eachTeam`);\r\n            setChartWidth((container.node() ? container.node().getBoundingClientRect().width - 24 : 0));\r\n        }\r\n          \r\n        window.addEventListener(\"resize\", handleResize);\r\n        handleResize();\r\n\r\n        return () => window.removeEventListener(\"resize\", handleResize);\r\n    }, []);\r\n    return chartWidth;\r\n}\r\n\r\nexport default MlbPitching;","import React from 'react';\nimport './App.css';\nimport Feed from './Feed/Feed';\nimport MlbPitching from './projects/MlbPitching/MlbPitching';\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route,\n//   Link\n// } from \"react-router-dom\";\nimport { HashRouter, Route, Link } from \"react-router-dom\";\n\nconst projects = [\n  {title: 'The demographics of suicide', content: 'A look at the difference across race, gender, and geography for suicide rates in the United States', tags: ['mortality', 'suicide'], link: 'https://nusoff01.github.io/mortalityFrontend/'},\n  {title: '2020 MLB pitching staffs', content: 'Using the ERA+ of pitchers to see how different MLB teams\\' pitching staffs line up', tags: ['baseball'], link: '#/pitching'}\n]\n\nexport default function App () {\n  return (\n    <HashRouter basename='/'>\n    <div className=\"App\">\n        <Route exact path=\"/\" render={(props) => <Feed projects={projects} />} />\n        <Route exact path=\"/pitching\" render={(props) => <MlbPitching/>}  />\n    </div>\n  </HashRouter>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}